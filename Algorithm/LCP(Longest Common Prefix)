char S[MAX];
int N, d, sa[MAX], pos[MAX],lcp[MAX];
bool cmp(int i, int j) {
	if (pos[i] != pos[j]) return pos[i] < pos[j];
	i += d; j += d;
	return (i < N&&j < N) ? (pos[i] < pos[j]) : (i > j);
}
void SA() {
	N = 0;
	while (S[++N]);
	for (int i = 0; i < N; ++i) {
		sa[i] = i;
		pos[i] = S[i];
	}
	for (d = 1;; d <<= 1) {
		quickSort(sa,0,N-1);
		int temp[MAX] = { 0 };
		for (int i = 0; i < N - 1; i++)
			temp[i + 1] = temp[i] + cmp(sa[i], sa[i + 1]);
		for (int i = 0; i < N; i++)
			pos[sa[i]] = temp[i];
		if (temp[N - 1] == N - 1) break;
	}
} 
void LCP() {
	for (int i = 0, k = 0; i < N; i++, k = k > 0 ? k - 1 : 0) {
		if (pos[i] == N - 1) continue;
		for (int j = sa[pos[i] + 1]; S[i + k] == S[j + k]; k++);
		lcp[pos[i]] = k;
	}
}
