#include <bits/stdc++.h>
using namespace std;
struct MaximumFlow{
    struct Edge{
        int to;
        int capacity;
        Edge *rev;
        Edge(int to,int capacity) : to(to),capacity(capacity){}
    };
    int n,source,sink;
    vector <vector <Edge *> > graph;
    MaximumFlow(int n,int source,int sink) :n(n),source(source),sink(sink){
        graph.resize(n);
    };
    void addEdge(int u,int v,int cap){
        Edge *ori=new Edge(v,cap);
        Edge *rev=new Edge(u,0);
        ori->rev=rev;
        rev->rev=ori;
        graph[u].push_back(ori);
        graph[v].push_back(rev);
    }
    int bfs(){
        vector <bool> check(n,false);
        vector <pair <int,int> > from(n,make_pair(-1,-1));
        queue <int> q;
        q.push(source);
        check[source]=true;
        while(!q.empty()){
            int x=q.front();
            q.pop();
            for(int i=0;i<graph[x].size();++i)
                if(graph[x][i]->capacity>0&&!check[graph[x][i]->to]){
                    q.push(graph[x][i]->to);
                    check[graph[x][i]->to]=true;
                    from[graph[x][i]->to]=make_pair(x,i);
                }
        }
        if(!check[sink]) return 0;
        int x=sink;
        int c=graph[from[x].first][from[x].second]->capacity;
        while(from[x].first!=-1){
            if(c>graph[from[x].first][from[x].second]->capacity)
                c=graph[from[x].first][from[x].second]->capacity;
            x=from[x].first;
        }
        x=sink;
        while(from[x].first!=-1){
            Edge *e=graph[from[x].first][from[x].second];
            e->capacity -=c;
            e->rev->capacity+=c;
            x=from[x].first;
        }
        return c;
    }
    int flow(){
        int ans=0;
        while(true){
            int f=bfs();
            if(!f) break;
            ans+=f;
        }
        return ans;
    }
};
int main(){
    int n,x;
    char a,b;
    MaximumFlow mf(52,0,25);
    cin>>n;
    while(n--){
        cin>>a>>b>>x;
        a-=(a>='a'?'a'-26:'A');
        b-=(b>='a'?'a'-26:'A');
        mf.addEdge(a,b,x);
        mf.addEdge(b,a,x);
    }
    cout<<mf.flow();
    return 0;
}
