/*
  acmicpc.net/problem/10999
*/
#include <iostream>
using namespace std;
typedef long long ll;
int n, m, k, a, b, c, d;
ll tree[1<<21], lazy[1 << 21], x[1000005];
ll init(int node, int s, int e) {
	if (s == e) return tree[node] = x[s];
	int mid = s + e >> 1;
	return tree[node] = init(node << 1, s, mid) + init(node<<1|1, mid+1, e);
}
void update_lazy(int node,int s,int e) {
	if (!lazy[node]) return;
	tree[node] += (e - s + 1)*lazy[node];
	if (s != e) {
		lazy[node << 1] += lazy[node];
		lazy[node << 1 | 1] += lazy[node];
	}
	lazy[node] = 0;
}
void update(int node ,int s,int e,int l,int r,ll val) {
	update_lazy(node, s, e);
	if (s > r || l > e) return;
	if (s >= l && r >= e) {
		tree[node] += (e - s + 1)*val;
		if(s!=e){
			lazy[node << 1] += val;
			lazy[node << 1 | 1] += val;
		}
		return;
	}
	int mid = s + e >> 1;
	update(node << 1, s, mid, l, r, val);
	update(node << 1|1, mid+1, e, l, r, val);
	tree[node] = tree[node << 1] + tree[node << 1 | 1];
}
ll sum(int node, int s, int e, int l, int r) {
	update_lazy(node, s, e);
	if (l > e || r < s) return 0;
	if (l <= s & e <= r) return tree[node];
	int mid = s + e >> 1;
	return sum(node << 1, s, mid, l, r) + sum(node << 1 | 1, mid + 1, e, l, r);
}
int main() {
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> n >> m >> k;
	m += k;
	for (int i = 0; i < n; i++) cin >> x[i];
	init(1, 0, n - 1);
	while (m--) {
		cin >> a >> b >> c;
		if (a == 1) {
			cin >> d;
			update(1, 0, n - 1, b - 1, c - 1, d);
		}
		else cout << sum(1, 0, n - 1, b - 1, c - 1) << '\n';
	}
	return 0;
}
